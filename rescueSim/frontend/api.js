const API_BASE_URL = "/api"; // Relative path for API routes handled by Vercel rewrites

const API = {
    /**
     * Start the simulation by calling the backend API.
     * @returns {Promise<string>} - The simulation prompt returned by the backend.
     */
    async startSimulation() {
        try {
            const response = await fetch(`${API_BASE_URL}/start-simulation`, { method: "POST" });
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            const data = await response.json();
            return data.prompt;
        } catch (error) {
            console.error("Error in startSimulation API call:", error);
            throw error;
        }
    },

    /**
     * Reset the simulation by calling the backend API.
     * @returns {Promise<void>} - Resolves when the reset is successful.
     */
    async resetSimulation() {
        try {
            const response = await fetch(`${API_BASE_URL}/reset-simulation`, { method: "POST" });
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            const data = await response.json();
            console.log(data.message); // Log success message for debugging
        } catch (error) {
            console.error("Error in resetSimulation API call:", error);
            throw error;
        }
    },

    /**
     * Upload an audio file to the backend for transcription.
     * @param {Blob} audioBlob - The audio file to upload.
     * @returns {Promise<string>} - The transcription of the uploaded audio.
     */
    async uploadAudio(audioBlob) {
        try {
            const formData = new FormData();
            formData.append("file", audioBlob, "recording.webm");

            const response = await fetch(`${API_BASE_URL}/record-audio`, {
                method: "POST",
                body: formData,
            });

            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }

            const data = await response.json();
            return data.transcription;
        } catch (error) {
            console.error("Error in uploadAudio API call:", error);
            throw error;
        }
    },

    /**
     * Fetch the victim's response and audio from the backend.
     * @returns {Promise<{text: string, audio_url: string}>} - GPT response text and audio URL.
     */
    async listenToCaller() {
        try {
            const response = await fetch(`${API_BASE_URL}/listen-to-caller`, { method: "POST" });
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.error("Error in listenToCaller API call:", error);
            throw error;
        }
    },

    /**
     * Send dispatcher message to the backend and get the victim's response.
     * @param {string} dispatcherMessage - The dispatcher's input.
     * @returns {Promise<string>} - The victim's response generated by GPT.
     */
    async sendDispatcherMessage(dispatcherMessage) {
        try {
            const response = await fetch(`${API_BASE_URL}/text-to-text`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ dispatcher_message: dispatcherMessage }), // Match Pydantic model
            });

            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }

            const data = await response.json();
            return data.victim_response; // Victim's response from backend
        } catch (error) {
            console.error("Error in sendDispatcherMessage API call:", error);
            throw error;
        }
    },

    /**
     * Fetch performance feedback from the backend.
     * @returns {Promise<{rating: number, review: string, feedback: string}>} - Feedback data from the backend.
     */
    async fetchFeedback() {
        try {
            const response = await fetch(`${API_BASE_URL}/generate-feedback`, { method: "POST" });
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            const data = await response.json();
            return data; // This contains { rating, review, feedback }
        } catch (error) {
            console.error("Error fetching feedback:", error);
            throw error;
        }
    },

    /**
     * Process an uploaded audio file by sending it to the backend.
     * @param {File} audioFile - The audio file to upload.
     * @returns {Promise<{conversation_log: string, feedback: string}>} - The conversation log and feedback.
     */
    async processAudio(audioFile) {
        try {
            const formData = new FormData();
            formData.append("file", audioFile);

            console.log("Uploading file:", audioFile); // Debug log

            const response = await fetch(`${API_BASE_URL}/process-audio`, {
                method: "POST",
                body: formData,
            });

            console.log("Response status:", response.status); // Debug log

            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }

            const data = await response.json();
            console.log("API response data:", data); // Debug log
            return data;
        } catch (error) {
            console.error("Error in processAudio API call:", error);
            throw error;
        }
    },

    /**
     * Upload a text file to the backend for processing.
     * @param {File} file - The text file to upload.
     * @returns {Promise<{conversation_log: string, feedback: string}>} - The formatted log and feedback.
     */
    async uploadTextFile(file) {
        try {
            const formData = new FormData();
            formData.append("file", file);

            const response = await fetch(`${API_BASE_URL}/process-text-file`, {
                method: "POST",
                body: formData,
            });

            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }

            const data = await response.json();
            return data; // { conversation_log, feedback }
        } catch (error) {
            console.error("Error in uploadTextFile API call:", error);
            throw error;
        }
    }
};

export default API;
